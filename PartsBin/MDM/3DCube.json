{"id":0,"registry":{"0":{"shape":{"__isSmartRef__":true,"id":1},"submorphs":[],"scripts":[],"_ClipMode":"auto","derivationIds":["3ABFAB66-3E1D-4B57-B4D3-DBF0D37DCE60","D3CB6A05-D42B-419A-992D-1DDF9DDED959","034779AD-D220-487C-A85D-C8C72ED576E0","A62D47E6-D416-4F59-9C68-57A81AD83D78","4A7A9D63-639B-4502-B6AD-C65D7DEABE36","919979F9-AEA7-4741-8365-3A90CF166899","6E805C97-03E9-4799-92AB-833429CF2B8C","75E8A1AF-3D80-4481-B693-4CBE5E0467E4","E3532686-AE31-4ACA-A3EC-068A8C931B5A","484D0042-1EBA-40F7-B171-23047290E340","A6744092-041B-44D9-8D9D-D5821E249E0B","EDB31DE5-727F-4D8E-9303-03FB080DE6A3","43864F00-BF04-421C-94AC-180002F837CC","9C0DD30D-87D5-4277-8439-2350B5AE86D2","73047A58-DE6E-4DC0-AFC3-800B523478EE","5F6BCAB0-5569-4714-9602-8925985BB17D","D671F0F8-31E2-48F8-A545-035DA9552210","E0C48BBF-08B0-4D1D-B42F-7A92A67BB3F5"],"id":"57849E00-AC4B-4676-8F6D-8B5C025A3578","droppingEnabled":true,"halosEnabled":true,"_StyleClassNames":["Morph","HtmlWrapperMorph","selectable"],"eventHandler":{"__isSmartRef__":true,"id":2},"showsHalos":false,"partsBinMetaInfo":{"__isSmartRef__":true,"id":3},"name":"3DCube","prevScroll":[0,0],"htmlString":"","isBeingDragged":false,"cube":{"__isSmartRef__":true,"id":26},"_Rotation":0,"_Scale":1,"__serializedExpressions__":["_Position","distanceToDragEvent"],"__serializedLivelyClosures__":{"__isSmartRef__":true,"id":212},"__LivelyClassName__":"lively.morphic.HtmlWrapperMorph","__SourceModuleName__":"Global.lively.morphic.AdditionalMorphs","_Position":"lively.pt(0.0,0.0)","distanceToDragEvent":"lively.pt(302.0,-9.0)"},"1":{"_BorderWidth":1,"stringifiedShapeNode":"<div xmlns=\"http://www.w3.org/1999/xhtml\" data-lively-morphid=\"57849E00-AC4B-4676-8F6D-8B5C025A3578\" class=\"Morph HtmlWrapperMorph selectable\" id=\"null\" style=\"overflow: auto; padding: 0px; width: 142px; height: 138px; position: absolute; left: 0px; top: 0px; border: 1px solid rgb(204, 0, 0);\"><canvas width=\"144\" height=\"140\" style=\"width: 144px; height: 140px;\"></canvas></div>","_AppearanceStylingMode":true,"_BorderStylingMode":false,"__serializedExpressions__":["_Padding","_Position","_Extent","_Fill","extent"],"__LivelyClassName__":"lively.morphic.Shapes.External","__SourceModuleName__":"Global.lively.morphic.Shapes","_Padding":"lively.rect(0,0,0,0)","_Position":"lively.pt(0.0,0.0)","_Extent":"lively.pt(142.0,138.0)","_Fill":"Color.rgba(255,255,255,0)","extent":"lively.pt(144.0,140.0)"},"2":{"morph":{"__isSmartRef__":true,"id":0},"__LivelyClassName__":"lively.morphic.EventHandler","__SourceModuleName__":"Global.lively.morphic.Events"},"3":{"partName":"3DCube","requiredModules":[],"partsSpaceName":"PartsBin/MDM/","comment":"A morph that renders arbitrary HTML. Makes integrations of non-morphic content straightforward. Look inside the menu to open an HTML editor or export the content as an HTML document.","changes":[{"__isSmartRef__":true,"id":4},{"__isSmartRef__":true,"id":5},{"__isSmartRef__":true,"id":6},{"__isSmartRef__":true,"id":7},{"__isSmartRef__":true,"id":8},{"__isSmartRef__":true,"id":9},{"__isSmartRef__":true,"id":10},{"__isSmartRef__":true,"id":11},{"__isSmartRef__":true,"id":12},{"__isSmartRef__":true,"id":13},{"__isSmartRef__":true,"id":14},{"__isSmartRef__":true,"id":15},{"__isSmartRef__":true,"id":16},{"__isSmartRef__":true,"id":17},{"__isSmartRef__":true,"id":18},{"__isSmartRef__":true,"id":19},{"__isSmartRef__":true,"id":20},{"__isSmartRef__":true,"id":21},{"__isSmartRef__":true,"id":22},{"__isSmartRef__":true,"id":23},{"__isSmartRef__":true,"id":24},{"__isSmartRef__":true,"id":25}],"migrationLevel":9,"__serializedExpressions__":["lastModifiedDate"],"__LivelyClassName__":"lively.PartsBin.PartsBinMetaInfo","__SourceModuleName__":"Global.lively.PartsBin","lastModifiedDate":"new Date(\"Tue Jun 09 2015 13:46:05 GMT-0700 (PDT)\")"},"4":{"author":"robertkrahn","message":"Fixed reset as suggested by Rick. Thanks Rick!","id":"C9389773-D839-4E3C-AF10-28F6282541BB","__serializedExpressions__":["date"],"date":"new Date(\"Thu Jul 17 2014 12:02:10 GMT-0700 (PDT)\")"},"5":{"author":"robertkrahn","message":"no comment","id":"4B305BE4-1B35-4BBB-ABCE-D255D563CBD9","__serializedExpressions__":["date"],"date":"new Date(\"Wed Feb 12 2014 15:34:42 GMT-0800 (PST)\")"},"6":{"author":"robertkrahn","message":"no comment","id":"FC45EDD5-3632-41E9-8CCF-1E7BF0F5B7FA","__serializedExpressions__":["date"],"date":"new Date(\"Wed Feb 12 2014 15:35:06 GMT-0800 (PST)\")"},"7":{"author":"robertkrahn","message":"clipped","id":"D4A9A56A-16E6-4D3D-9B42-425F9CE8E8B6","__serializedExpressions__":["date"],"date":"new Date(\"Wed Feb 12 2014 16:29:30 GMT-0800 (PST)\")"},"8":{"author":"robertkrahn","message":"clipped","id":"287FA9C0-4815-46CD-B588-28102199A3F0","__serializedExpressions__":["date"],"date":"new Date(\"Wed Feb 12 2014 16:29:38 GMT-0800 (PST)\")"},"9":{"author":"rick","message":"added a few helper scripts","id":"A9AF9642-F781-4A08-A0D1-9590A65517C0","__serializedExpressions__":["date"],"date":"new Date(\"Fri Sep 05 2014 08:25:26 GMT-0700 (PDT)\")"},"10":{"author":"Alexia","message":"no comment","id":"833EAC70-998E-40D8-BAD9-9305CF312B1D","__serializedExpressions__":["date"],"date":"new Date(\"Mon Jun 08 2015 16:54:49 GMT-0700 (PDT)\")"},"11":{"author":"Alexia","message":"no comment","id":"B432157F-3EC7-43E2-ADFB-19AABE46B340","__serializedExpressions__":["date"],"date":"new Date(\"Mon Jun 08 2015 18:36:01 GMT-0700 (PDT)\")"},"12":{"author":"Alexia","message":"no comment","id":"DF93ED55-6519-43E7-8A41-C03C05DCBEC9","__serializedExpressions__":["date"],"date":"new Date(\"Mon Jun 08 2015 22:15:26 GMT-0700 (PDT)\")"},"13":{"author":"Alexia","message":"no comment","id":"72E05D5F-6671-4A9B-A851-312EBCF2AAED","__serializedExpressions__":["date"],"date":"new Date(\"Mon Jun 08 2015 22:16:32 GMT-0700 (PDT)\")"},"14":{"author":"Alexia","message":"no comment","id":"1CDA3E54-4BAA-4657-AD2A-AD08093EE031","__serializedExpressions__":["date"],"date":"new Date(\"Mon Jun 08 2015 22:32:12 GMT-0700 (PDT)\")"},"15":{"author":"Alexia","message":"no comment","id":"FEDACA0B-1A1C-45A2-9373-FFAD76B2E41E","__serializedExpressions__":["date"],"date":"new Date(\"Tue Jun 09 2015 10:38:46 GMT-0700 (PDT)\")"},"16":{"author":"Alexia","message":"no comment","id":"18D3C8F0-41E0-4FCB-8F60-883BAD99B972","__serializedExpressions__":["date"],"date":"new Date(\"Tue Jun 09 2015 10:40:10 GMT-0700 (PDT)\")"},"17":{"author":"Alexia","message":"no comment","id":"D26124E0-7B6D-4304-9A1A-B34D4905A5B6","__serializedExpressions__":["date"],"date":"new Date(\"Tue Jun 09 2015 10:51:09 GMT-0700 (PDT)\")"},"18":{"author":"Alexia","message":"no comment","id":"E3F13A3E-79C7-4317-96D8-C6BE29AAD458","__serializedExpressions__":["date"],"date":"new Date(\"Tue Jun 09 2015 10:54:52 GMT-0700 (PDT)\")"},"19":{"author":"Alexia","message":"no comment","id":"9B905E74-D678-4071-AE80-563020D0C239","__serializedExpressions__":["date"],"date":"new Date(\"Tue Jun 09 2015 10:55:59 GMT-0700 (PDT)\")"},"20":{"author":"Alexia","message":"no comment","id":"61132A56-DEE5-43FA-9DF9-F9EA84D9FD2A","__serializedExpressions__":["date"],"date":"new Date(\"Tue Jun 09 2015 10:56:45 GMT-0700 (PDT)\")"},"21":{"author":"Alexia","message":"no comment","id":"5D56F793-D080-467A-9AAD-A86EA9356FC6","__serializedExpressions__":["date"],"date":"new Date(\"Tue Jun 09 2015 10:57:45 GMT-0700 (PDT)\")"},"22":{"author":"Alexia","message":"no comment","id":"2C97DD4A-779B-440A-B109-7929ABE8AE4F","__serializedExpressions__":["date"],"date":"new Date(\"Tue Jun 09 2015 10:58:42 GMT-0700 (PDT)\")"},"23":{"author":"Alexia","message":"no comment","id":"2A52ABC5-BBB0-4FD6-AA4A-450B7B5A4D14","__serializedExpressions__":["date"],"date":"new Date(\"Tue Jun 09 2015 13:11:17 GMT-0700 (PDT)\")"},"24":{"author":"Alexia","message":"no comment","id":"FDAE44E1-7EC6-486C-9210-6862BFEB780E","__serializedExpressions__":["date"],"date":"new Date(\"Tue Jun 09 2015 13:46:05 GMT-0700 (PDT)\")"},"25":{"__serializedExpressions__":["date"],"author":"Alexia","message":"no comment","id":"CD6AF21C-CDD6-41BA-B462-50850E026594","date":"new Date(\"Tue Jun 09 2015 14:16:54 GMT-0700 (PDT)\")"},"26":{"uuid":"8EAF865A-2C26-4F4E-A895-1B17B39CD142","name":"","type":"Mesh","parent":{"__isSmartRef__":true,"id":27},"children":[],"up":{"__isSmartRef__":true,"id":38},"position":{"__isSmartRef__":true,"id":39},"rotation":{"__isSmartRef__":true,"id":40},"quaternion":{"__isSmartRef__":true,"id":41},"scale":{"__isSmartRef__":true,"id":42},"rotationAutoUpdate":true,"matrix":{"__isSmartRef__":true,"id":43},"matrixWorld":{"__isSmartRef__":true,"id":45},"matrixAutoUpdate":true,"matrixWorldNeedsUpdate":false,"visible":true,"castShadow":false,"receiveShadow":false,"frustumCulled":true,"renderOrder":0,"userData":{"__isSmartRef__":true,"id":47},"geometry":{"__isSmartRef__":true,"id":48},"material":{"__isSmartRef__":true,"id":169},"__webglInit":true,"_modelViewMatrix":{"__isSmartRef__":true,"id":207},"_normalMatrix":{"__isSmartRef__":true,"id":209},"_listeners":{"__isSmartRef__":true,"id":211},"__webglActive":true},"27":{"uuid":"A7B55F4A-8228-459C-AAEC-ED9A1864FDAD","name":"","type":"Scene","children":[{"__isSmartRef__":true,"id":26}],"up":{"__isSmartRef__":true,"id":28},"position":{"__isSmartRef__":true,"id":29},"rotation":{"__isSmartRef__":true,"id":30},"quaternion":{"__isSmartRef__":true,"id":31},"scale":{"__isSmartRef__":true,"id":32},"rotationAutoUpdate":true,"matrix":{"__isSmartRef__":true,"id":33},"matrixWorld":{"__isSmartRef__":true,"id":35},"matrixAutoUpdate":true,"matrixWorldNeedsUpdate":false,"visible":true,"castShadow":false,"receiveShadow":false,"frustumCulled":true,"renderOrder":0,"userData":{"__isSmartRef__":true,"id":37},"fog":null,"overrideMaterial":null,"autoUpdate":true},"28":{"x":0,"y":1,"z":0},"29":{"x":0,"y":0,"z":0},"30":{"_x":0,"_y":0,"_z":0,"_order":"XYZ"},"31":{"_x":0,"_y":0,"_z":0,"_w":1},"32":{"x":1,"y":1,"z":1},"33":{"elements":{"__isSmartRef__":true,"id":34}},"34":{"__TypedArrayClass__":"Float32Array","__TypedArrayData__":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]},"35":{"elements":{"__isSmartRef__":true,"id":36}},"36":{"__TypedArrayClass__":"Float32Array","__TypedArrayData__":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]},"37":{},"38":{"x":0,"y":1,"z":0},"39":{"x":0,"y":0,"z":0},"40":{"_x":6.179999999999913,"_y":6.179999999999913,"_z":0,"_order":"XYZ"},"41":{"_x":-0.05150114936759221,"_y":-0.05150114936759221,"_z":0.0026594410126829842,"_w":0.997340558987317},"42":{"x":1,"y":1,"z":1},"43":{"elements":{"__isSmartRef__":true,"id":44}},"44":{"__TypedArrayClass__":"Float32Array","__TypedArrayData__":[0.9946811199188232,0.01060947310179472,0.10245443880558014,0,-8.673617379884035e-19,0.9946811199188232,-0.10300230234861374,0,-0.10300230234861374,0.10245443880558014,0.9893905520439148,0,0,0,0,1]},"45":{"elements":{"__isSmartRef__":true,"id":46}},"46":{"__TypedArrayClass__":"Float32Array","__TypedArrayData__":[0.9946811199188232,0.01060947310179472,0.10245443880558014,0,-8.673617379884035e-19,0.9946811199188232,-0.10300230234861374,0,-0.10300230234861374,0.10245443880558014,0.9893905520439148,0,0,0,0,1]},"47":{},"48":{"uuid":"A3750178-34FE-48F8-943D-2A88615A3167","name":"","type":"BoxGeometry","vertices":[{"__isSmartRef__":true,"id":49},{"__isSmartRef__":true,"id":50},{"__isSmartRef__":true,"id":51},{"__isSmartRef__":true,"id":52},{"__isSmartRef__":true,"id":53},{"__isSmartRef__":true,"id":54},{"__isSmartRef__":true,"id":55},{"__isSmartRef__":true,"id":56}],"colors":[],"faces":[{"__isSmartRef__":true,"id":57},{"__isSmartRef__":true,"id":63},{"__isSmartRef__":true,"id":69},{"__isSmartRef__":true,"id":75},{"__isSmartRef__":true,"id":81},{"__isSmartRef__":true,"id":87},{"__isSmartRef__":true,"id":93},{"__isSmartRef__":true,"id":99},{"__isSmartRef__":true,"id":105},{"__isSmartRef__":true,"id":111},{"__isSmartRef__":true,"id":117},{"__isSmartRef__":true,"id":123}],"faceVertexUvs":[[[{"__isSmartRef__":true,"id":129},{"__isSmartRef__":true,"id":130},{"__isSmartRef__":true,"id":131}],[{"__isSmartRef__":true,"id":132},{"__isSmartRef__":true,"id":133},{"__isSmartRef__":true,"id":134}],[{"__isSmartRef__":true,"id":135},{"__isSmartRef__":true,"id":136},{"__isSmartRef__":true,"id":137}],[{"__isSmartRef__":true,"id":138},{"__isSmartRef__":true,"id":139},{"__isSmartRef__":true,"id":140}],[{"__isSmartRef__":true,"id":141},{"__isSmartRef__":true,"id":142},{"__isSmartRef__":true,"id":143}],[{"__isSmartRef__":true,"id":144},{"__isSmartRef__":true,"id":145},{"__isSmartRef__":true,"id":146}],[{"__isSmartRef__":true,"id":147},{"__isSmartRef__":true,"id":148},{"__isSmartRef__":true,"id":149}],[{"__isSmartRef__":true,"id":150},{"__isSmartRef__":true,"id":151},{"__isSmartRef__":true,"id":152}],[{"__isSmartRef__":true,"id":153},{"__isSmartRef__":true,"id":154},{"__isSmartRef__":true,"id":155}],[{"__isSmartRef__":true,"id":156},{"__isSmartRef__":true,"id":157},{"__isSmartRef__":true,"id":158}],[{"__isSmartRef__":true,"id":159},{"__isSmartRef__":true,"id":160},{"__isSmartRef__":true,"id":161}],[{"__isSmartRef__":true,"id":162},{"__isSmartRef__":true,"id":163},{"__isSmartRef__":true,"id":164}]]],"morphTargets":[],"morphColors":[],"morphNormals":[],"skinWeights":[],"skinIndices":[],"lineDistances":[],"boundingBox":null,"boundingSphere":{"__isSmartRef__":true,"id":165},"hasTangents":false,"dynamic":true,"verticesNeedUpdate":false,"elementsNeedUpdate":false,"uvsNeedUpdate":false,"normalsNeedUpdate":false,"tangentsNeedUpdate":false,"colorsNeedUpdate":false,"lineDistancesNeedUpdate":false,"groupsNeedUpdate":false,"parameters":{"__isSmartRef__":true,"id":167},"widthSegments":1,"heightSegments":1,"depthSegments":1,"__webglInit":true,"_listeners":{"__isSmartRef__":true,"id":168},"morphTargetsNeedUpdate":false},"49":{"x":0.5,"y":0.5,"z":0.5},"50":{"x":0.5,"y":0.5,"z":-0.5},"51":{"x":0.5,"y":-0.5,"z":0.5},"52":{"x":0.5,"y":-0.5,"z":-0.5},"53":{"x":-0.5,"y":0.5,"z":-0.5},"54":{"x":-0.5,"y":0.5,"z":0.5},"55":{"x":-0.5,"y":-0.5,"z":-0.5},"56":{"x":-0.5,"y":-0.5,"z":0.5},"57":{"a":0,"b":2,"c":1,"normal":{"__isSmartRef__":true,"id":58},"vertexNormals":[{"__isSmartRef__":true,"id":59},{"__isSmartRef__":true,"id":60},{"__isSmartRef__":true,"id":61}],"color":{"__isSmartRef__":true,"id":62},"vertexColors":[],"vertexTangents":[],"materialIndex":0},"58":{"x":1,"y":0,"z":0},"59":{"x":1,"y":0,"z":0},"60":{"x":1,"y":0,"z":0},"61":{"x":1,"y":0,"z":0},"62":{},"63":{"a":2,"b":3,"c":1,"normal":{"__isSmartRef__":true,"id":64},"vertexNormals":[{"__isSmartRef__":true,"id":65},{"__isSmartRef__":true,"id":66},{"__isSmartRef__":true,"id":67}],"color":{"__isSmartRef__":true,"id":68},"vertexColors":[],"vertexTangents":[],"materialIndex":0},"64":{"x":1,"y":0,"z":0},"65":{"x":1,"y":0,"z":0},"66":{"x":1,"y":0,"z":0},"67":{"x":1,"y":0,"z":0},"68":{},"69":{"a":4,"b":6,"c":5,"normal":{"__isSmartRef__":true,"id":70},"vertexNormals":[{"__isSmartRef__":true,"id":71},{"__isSmartRef__":true,"id":72},{"__isSmartRef__":true,"id":73}],"color":{"__isSmartRef__":true,"id":74},"vertexColors":[],"vertexTangents":[],"materialIndex":1},"70":{"x":-1,"y":0,"z":0},"71":{"x":-1,"y":0,"z":0},"72":{"x":-1,"y":0,"z":0},"73":{"x":-1,"y":0,"z":0},"74":{},"75":{"a":6,"b":7,"c":5,"normal":{"__isSmartRef__":true,"id":76},"vertexNormals":[{"__isSmartRef__":true,"id":77},{"__isSmartRef__":true,"id":78},{"__isSmartRef__":true,"id":79}],"color":{"__isSmartRef__":true,"id":80},"vertexColors":[],"vertexTangents":[],"materialIndex":1},"76":{"x":-1,"y":0,"z":0},"77":{"x":-1,"y":0,"z":0},"78":{"x":-1,"y":0,"z":0},"79":{"x":-1,"y":0,"z":0},"80":{},"81":{"a":4,"b":5,"c":1,"normal":{"__isSmartRef__":true,"id":82},"vertexNormals":[{"__isSmartRef__":true,"id":83},{"__isSmartRef__":true,"id":84},{"__isSmartRef__":true,"id":85}],"color":{"__isSmartRef__":true,"id":86},"vertexColors":[],"vertexTangents":[],"materialIndex":2},"82":{"x":0,"y":1,"z":0},"83":{"x":0,"y":1,"z":0},"84":{"x":0,"y":1,"z":0},"85":{"x":0,"y":1,"z":0},"86":{},"87":{"a":5,"b":0,"c":1,"normal":{"__isSmartRef__":true,"id":88},"vertexNormals":[{"__isSmartRef__":true,"id":89},{"__isSmartRef__":true,"id":90},{"__isSmartRef__":true,"id":91}],"color":{"__isSmartRef__":true,"id":92},"vertexColors":[],"vertexTangents":[],"materialIndex":2},"88":{"x":0,"y":1,"z":0},"89":{"x":0,"y":1,"z":0},"90":{"x":0,"y":1,"z":0},"91":{"x":0,"y":1,"z":0},"92":{},"93":{"a":7,"b":6,"c":2,"normal":{"__isSmartRef__":true,"id":94},"vertexNormals":[{"__isSmartRef__":true,"id":95},{"__isSmartRef__":true,"id":96},{"__isSmartRef__":true,"id":97}],"color":{"__isSmartRef__":true,"id":98},"vertexColors":[],"vertexTangents":[],"materialIndex":3},"94":{"x":0,"y":-1,"z":0},"95":{"x":0,"y":-1,"z":0},"96":{"x":0,"y":-1,"z":0},"97":{"x":0,"y":-1,"z":0},"98":{},"99":{"a":6,"b":3,"c":2,"normal":{"__isSmartRef__":true,"id":100},"vertexNormals":[{"__isSmartRef__":true,"id":101},{"__isSmartRef__":true,"id":102},{"__isSmartRef__":true,"id":103}],"color":{"__isSmartRef__":true,"id":104},"vertexColors":[],"vertexTangents":[],"materialIndex":3},"100":{"x":0,"y":-1,"z":0},"101":{"x":0,"y":-1,"z":0},"102":{"x":0,"y":-1,"z":0},"103":{"x":0,"y":-1,"z":0},"104":{},"105":{"a":5,"b":7,"c":0,"normal":{"__isSmartRef__":true,"id":106},"vertexNormals":[{"__isSmartRef__":true,"id":107},{"__isSmartRef__":true,"id":108},{"__isSmartRef__":true,"id":109}],"color":{"__isSmartRef__":true,"id":110},"vertexColors":[],"vertexTangents":[],"materialIndex":4},"106":{"x":0,"y":0,"z":1},"107":{"x":0,"y":0,"z":1},"108":{"x":0,"y":0,"z":1},"109":{"x":0,"y":0,"z":1},"110":{},"111":{"a":7,"b":2,"c":0,"normal":{"__isSmartRef__":true,"id":112},"vertexNormals":[{"__isSmartRef__":true,"id":113},{"__isSmartRef__":true,"id":114},{"__isSmartRef__":true,"id":115}],"color":{"__isSmartRef__":true,"id":116},"vertexColors":[],"vertexTangents":[],"materialIndex":4},"112":{"x":0,"y":0,"z":1},"113":{"x":0,"y":0,"z":1},"114":{"x":0,"y":0,"z":1},"115":{"x":0,"y":0,"z":1},"116":{},"117":{"a":1,"b":3,"c":4,"normal":{"__isSmartRef__":true,"id":118},"vertexNormals":[{"__isSmartRef__":true,"id":119},{"__isSmartRef__":true,"id":120},{"__isSmartRef__":true,"id":121}],"color":{"__isSmartRef__":true,"id":122},"vertexColors":[],"vertexTangents":[],"materialIndex":5},"118":{"x":0,"y":0,"z":-1},"119":{"x":0,"y":0,"z":-1},"120":{"x":0,"y":0,"z":-1},"121":{"x":0,"y":0,"z":-1},"122":{},"123":{"a":3,"b":6,"c":4,"normal":{"__isSmartRef__":true,"id":124},"vertexNormals":[{"__isSmartRef__":true,"id":125},{"__isSmartRef__":true,"id":126},{"__isSmartRef__":true,"id":127}],"color":{"__isSmartRef__":true,"id":128},"vertexColors":[],"vertexTangents":[],"materialIndex":5},"124":{"x":0,"y":0,"z":-1},"125":{"x":0,"y":0,"z":-1},"126":{"x":0,"y":0,"z":-1},"127":{"x":0,"y":0,"z":-1},"128":{},"129":{"x":0,"y":1},"130":{"x":0,"y":0},"131":{"x":1,"y":1},"132":{"x":0,"y":0},"133":{"x":1,"y":0},"134":{"x":1,"y":1},"135":{"x":0,"y":1},"136":{"x":0,"y":0},"137":{"x":1,"y":1},"138":{"x":0,"y":0},"139":{"x":1,"y":0},"140":{"x":1,"y":1},"141":{"x":0,"y":1},"142":{"x":0,"y":0},"143":{"x":1,"y":1},"144":{"x":0,"y":0},"145":{"x":1,"y":0},"146":{"x":1,"y":1},"147":{"x":0,"y":1},"148":{"x":0,"y":0},"149":{"x":1,"y":1},"150":{"x":0,"y":0},"151":{"x":1,"y":0},"152":{"x":1,"y":1},"153":{"x":0,"y":1},"154":{"x":0,"y":0},"155":{"x":1,"y":1},"156":{"x":0,"y":0},"157":{"x":1,"y":0},"158":{"x":1,"y":1},"159":{"x":0,"y":1},"160":{"x":0,"y":0},"161":{"x":1,"y":1},"162":{"x":0,"y":0},"163":{"x":1,"y":0},"164":{"x":1,"y":1},"165":{"center":{"__isSmartRef__":true,"id":166},"radius":0.8660254037844386},"166":{"x":0,"y":0,"z":0},"167":{"width":1,"height":1,"depth":1},"168":{"dispose":[]},"169":{"uuid":"D74B8CD1-1CEE-4D1A-9227-9B5EC11CADE0","name":"","type":"MeshBasicMaterial","side":0,"opacity":1,"transparent":false,"blending":1,"blendSrc":204,"blendDst":205,"blendEquation":100,"blendSrcAlpha":null,"blendDstAlpha":null,"blendEquationAlpha":null,"depthTest":true,"depthWrite":true,"colorWrite":true,"polygonOffset":false,"polygonOffsetFactor":0,"polygonOffsetUnits":0,"alphaTest":0,"overdraw":0,"visible":true,"_needsUpdate":false,"color":{"__isSmartRef__":true,"id":170},"map":null,"lightMap":null,"specularMap":null,"alphaMap":null,"envMap":null,"combine":0,"reflectivity":1,"refractionRatio":0.98,"fog":true,"shading":2,"wireframe":false,"wireframeLinewidth":1,"wireframeLinecap":"round","wireframeLinejoin":"round","vertexColors":0,"skinning":false,"morphTargets":false,"_listeners":{"__isSmartRef__":true,"id":171},"__webglShader":{"__isSmartRef__":true,"id":172},"program":{"__isSmartRef__":true,"id":197},"uniformsList":[[{"__isSmartRef__":true,"id":174},{"__isSmartRef__":true,"id":201}],[{"__isSmartRef__":true,"id":175},{"__isSmartRef__":true,"id":202}]]},"170":{"r":1,"g":0,"b":0.4},"171":{"dispose":[]},"172":{"uniforms":{"__isSmartRef__":true,"id":173},"vertexShader":"#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n\nfloat square( in float a ) { return a*a; }\nvec2  square( in vec2 a )  { return vec2( a.x*a.x, a.y*a.y ); }\nvec3  square( in vec3 a )  { return vec3( a.x*a.x, a.y*a.y, a.z*a.z ); }\nvec4  square( in vec4 a )  { return vec4( a.x*a.x, a.y*a.y, a.z*a.z, a.w*a.w ); }\nfloat saturate( in float a ) { return clamp( a, 0.0, 1.0 ); }\nvec2  saturate( in vec2 a )  { return clamp( a, 0.0, 1.0 ); }\nvec3  saturate( in vec3 a )  { return clamp( a, 0.0, 1.0 ); }\nvec4  saturate( in vec4 a )  { return clamp( a, 0.0, 1.0 ); }\nfloat average( in float a ) { return a; }\nfloat average( in vec2 a )  { return ( a.x + a.y) * 0.5; }\nfloat average( in vec3 a )  { return ( a.x + a.y + a.z) / 3.0; }\nfloat average( in vec4 a )  { return ( a.x + a.y + a.z + a.w) * 0.25; }\nfloat whiteCompliment( in float a ) { return saturate( 1.0 - a ); }\nvec2  whiteCompliment( in vec2 a )  { return saturate( vec2(1.0) - a ); }\nvec3  whiteCompliment( in vec3 a )  { return saturate( vec3(1.0) - a ); }\nvec4  whiteCompliment( in vec4 a )  { return saturate( vec4(1.0) - a ); }\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\n}\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal) {\n\tfloat distance = dot( planeNormal, point-pointOnPlane );\n\treturn point - distance * planeNormal;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn pointOnLine + lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) );\n}\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\n\tif ( decayExponent > 0.0 ) {\n\t  return pow( saturate( 1.0 - lightDistance / cutoffDistance ), decayExponent );\n\t}\n\treturn 1.0;\n}\n\nvec3 inputToLinear( in vec3 a ) {\n#ifdef GAMMA_INPUT\n\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\n#else\n\treturn a;\n#endif\n}\nvec3 linearToOutput( in vec3 a ) {\n#ifdef GAMMA_OUTPUT\n\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n#else\n\treturn a;\n#endif\n}\n\n#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n\n#endif\n\n#ifdef USE_LIGHTMAP\n\n\tvarying vec2 vUv2;\n\n#endif\n#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvarying vec3 vReflect;\n\n\tuniform float refractionRatio;\n\n#endif\n\n#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n#ifdef USE_MORPHTARGETS\n\n\t#ifndef USE_MORPHNORMALS\n\n\tuniform float morphTargetInfluences[ 8 ];\n\n\t#else\n\n\tuniform float morphTargetInfluences[ 4 ];\n\n\t#endif\n\n#endif\n#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n\n#ifdef USE_SHADOWMAP\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n\n#endif\n#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n\tuniform float logDepthBufFC;\n\n#endif\nvoid main() {\n#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n#endif\n#ifdef USE_LIGHTMAP\n\n\tvUv2 = uv2;\n\n#endif\n#ifdef USE_COLOR\n\n\tvColor.xyz = inputToLinear( color.xyz );\n\n#endif\n#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif\n\t#ifdef USE_ENVMAP\n#ifdef USE_MORPHNORMALS\n\n\tvec3 morphedNormal = vec3( 0.0 );\n\n\tmorphedNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tmorphedNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tmorphedNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tmorphedNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n\tmorphedNormal += normal;\n\n#endif\n#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\t#ifdef USE_MORPHNORMALS\n\n\tvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n\n\t#else\n\n\tvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n\n\t#endif\n\n#endif\n\n#ifdef USE_SKINNING\n\n\tvec3 objectNormal = skinnedNormal.xyz;\n\n#elif defined( USE_MORPHNORMALS )\n\n\tvec3 objectNormal = morphedNormal;\n\n#else\n\n\tvec3 objectNormal = normal;\n\n#endif\n\n#ifdef FLIP_SIDED\n\n\tobjectNormal = -objectNormal;\n\n#endif\n\nvec3 transformedNormal = normalMatrix * objectNormal;\n\n\t#endif\n#ifdef USE_MORPHTARGETS\n\n\tvec3 morphed = vec3( 0.0 );\n\tmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\tmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\tmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\tmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n\t#ifndef USE_MORPHNORMALS\n\n\tmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\tmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\tmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\tmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n\t#endif\n\n\tmorphed += position;\n\n#endif\n#ifdef USE_SKINNING\n\n\t#ifdef USE_MORPHTARGETS\n\n\tvec4 skinVertex = bindMatrix * vec4( morphed, 1.0 );\n\n\t#else\n\n\tvec4 skinVertex = bindMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n\n#endif\n\n#ifdef USE_SKINNING\n\n\tvec4 mvPosition = modelViewMatrix * skinned;\n\n#elif defined( USE_MORPHTARGETS )\n\n\tvec4 mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n\n#else\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;\n\n#ifdef USE_LOGDEPTHBUF\n\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\n#else\n\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\n\t#endif\n\n#endif\n#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\n\t#ifdef USE_SKINNING\n\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\n\t#elif defined( USE_MORPHTARGETS )\n\n\t\tvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n\n\t#else\n\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n#endif\n\n#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvec3 worldNormal = transformDirection( objectNormal, modelMatrix );\n\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t#else\n\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t#endif\n\n#endif\n\n#ifdef USE_SHADOWMAP\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n\n\t}\n\n#endif\n}","fragmentShader":"uniform vec3 diffuse;\nuniform float opacity;\n#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n\nfloat square( in float a ) { return a*a; }\nvec2  square( in vec2 a )  { return vec2( a.x*a.x, a.y*a.y ); }\nvec3  square( in vec3 a )  { return vec3( a.x*a.x, a.y*a.y, a.z*a.z ); }\nvec4  square( in vec4 a )  { return vec4( a.x*a.x, a.y*a.y, a.z*a.z, a.w*a.w ); }\nfloat saturate( in float a ) { return clamp( a, 0.0, 1.0 ); }\nvec2  saturate( in vec2 a )  { return clamp( a, 0.0, 1.0 ); }\nvec3  saturate( in vec3 a )  { return clamp( a, 0.0, 1.0 ); }\nvec4  saturate( in vec4 a )  { return clamp( a, 0.0, 1.0 ); }\nfloat average( in float a ) { return a; }\nfloat average( in vec2 a )  { return ( a.x + a.y) * 0.5; }\nfloat average( in vec3 a )  { return ( a.x + a.y + a.z) / 3.0; }\nfloat average( in vec4 a )  { return ( a.x + a.y + a.z + a.w) * 0.25; }\nfloat whiteCompliment( in float a ) { return saturate( 1.0 - a ); }\nvec2  whiteCompliment( in vec2 a )  { return saturate( vec2(1.0) - a ); }\nvec3  whiteCompliment( in vec3 a )  { return saturate( vec3(1.0) - a ); }\nvec4  whiteCompliment( in vec4 a )  { return saturate( vec4(1.0) - a ); }\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\n}\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal) {\n\tfloat distance = dot( planeNormal, point-pointOnPlane );\n\treturn point - distance * planeNormal;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn pointOnLine + lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) );\n}\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\n\tif ( decayExponent > 0.0 ) {\n\t  return pow( saturate( 1.0 - lightDistance / cutoffDistance ), decayExponent );\n\t}\n\treturn 1.0;\n}\n\nvec3 inputToLinear( in vec3 a ) {\n#ifdef GAMMA_INPUT\n\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\n#else\n\treturn a;\n#endif\n}\nvec3 linearToOutput( in vec3 a ) {\n#ifdef GAMMA_OUTPUT\n\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n#else\n\treturn a;\n#endif\n}\n\n#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n\n#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\n#endif\n\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif\n#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n\n#ifdef USE_LIGHTMAP\n\n\tvarying vec2 vUv2;\n\tuniform sampler2D lightMap;\n\n#endif\n#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tuniform float refractionRatio;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\n\t#endif\n\n#endif\n\n#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n\n#endif\n#ifdef USE_SHADOWMAP\n\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\n\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\n\tuniform float shadowBias[ MAX_SHADOWS ];\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\n\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\tfloat depth = dot( rgba_depth, bit_shift );\n\t\treturn depth;\n\n\t}\n\n#endif\n#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif\n#ifdef USE_LOGDEPTHBUF\n\n\tuniform float logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\t#extension GL_EXT_frag_depth : enable\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n#endif\nvoid main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n\n#endif\n#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\ttexelColor.xyz = inputToLinear( texelColor.xyz );\n\n\tdiffuseColor *= texelColor;\n\n#endif\n#ifdef USE_COLOR\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif\n#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n\n#ifdef ALPHATEST\n\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n\n#endif\n\nfloat specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif\n\toutgoingLight = diffuseColor.rgb;\n#ifdef USE_LIGHTMAP\n\n\toutgoingLight *= diffuseColor.xyz * texture2D( lightMap, vUv2 ).xyz;\n\n#endif\n#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\t\tfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\t#else\n\t\tfloat flipNormal = 1.0;\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\n\tenvColor.xyz = inputToLinear( envColor.xyz );\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n\n#ifdef USE_SHADOWMAP\n\n\t#ifdef SHADOWMAP_DEBUG\n\n\t\tvec3 frustumColors[3];\n\t\tfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\n\t\tfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\n\t\tfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n\n\t#endif\n\n\t#ifdef SHADOWMAP_CASCADE\n\n\t\tint inFrustumCount = 0;\n\n\t#endif\n\n\tfloat fDepth;\n\tvec3 shadowColor = vec3( 1.0 );\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n\t\t\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\n\t\t\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\t\t\t// don't shadow pixels outside of light frustum\n\t\t\t\t// use just first frustum (for cascades)\n\t\t\t\t// don't shadow pixels behind far plane of light frustum\n\n\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\tinFrustumCount += int( inFrustum );\n\t\t\tbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n\n\t\t#else\n\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\t#endif\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t/*\n\t\t\t\t\t\t// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\n\t\t\t\t\t\t// must enroll loop manually\n\n\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\n\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\n\n\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n\n\t\t\t\t\t\t\t\t// doesn't seem to produce any noticeable visual difference compared to simple texture2D lookup\n\t\t\t\t\t\t\t\t//vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\n\n\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\n\t\t\t\t\t\t\tshadow += 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tshadow /= 9.0;\n\n\t\t*/\n\n\t\t\t\tconst float shadowDelta = 1.0 / 9.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.25 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.25 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.0 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.0 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\n\n\t\t\t\tmat3 shadowKernel;\n\t\t\t\tmat3 depthKernel;\n\n\t\t\t\tdepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tdepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tdepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tdepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tdepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tdepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tdepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tdepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tdepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\n\t\t\t\tshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\n\t\t\t\tshadowKernel[0] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\n\t\t\t\tshadowKernel[1] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\n\t\t\t\tshadowKernel[2] *= vec3(0.25);\n\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\n\n\t\t\t\tshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\n\t\t\t\tshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\n\n\t\t\t\tvec4 shadowValues;\n\t\t\t\tshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\n\t\t\t\tshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\n\t\t\t\tshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\n\t\t\t\tshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\n\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) );\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#else\n\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\tif ( fDepth < shadowCoord.z )\n\n\t\t// spot with multiple shadows is darker\n\n\t\t\t\t\tshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n\n\t\t// spot with multiple shadows has the same color as single shadow spot\n\n\t\t// \t\t\t\t\tshadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\n\n\t\t\t#endif\n\n\t\t}\n\n\n\t\t#ifdef SHADOWMAP_DEBUG\n\n\t\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\t\tif ( inFrustum && inFrustumCount == 1 ) outgoingLight *= frustumColors[ i ];\n\n\t\t\t#else\n\n\t\t\t\tif ( inFrustum ) outgoingLight *= frustumColors[ i ];\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t}\n\n\t// NOTE: I am unsure if this is correct in linear space.  -bhouston, Dec 29, 2014\n\tshadowColor = inputToLinear( shadowColor );\n\n\toutgoingLight = outgoingLight * shadowColor;\n\n#endif\n\n\n\toutgoingLight = linearToOutput( outgoingLight );\n\n#ifdef USE_FOG\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\n\t#else\n\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\n\t#endif\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = exp2( - square( fogDensity ) * square( depth ) * LOG2 );\n\t\tfogFactor = whiteCompliment( fogFactor );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\n\t#endif\n\t\n\toutgoingLight = mix( outgoingLight, fogColor, fogFactor );\n\n#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"},"173":{"diffuse":{"__isSmartRef__":true,"id":174},"opacity":{"__isSmartRef__":true,"id":175},"map":{"__isSmartRef__":true,"id":176},"offsetRepeat":{"__isSmartRef__":true,"id":177},"lightMap":{"__isSmartRef__":true,"id":179},"specularMap":{"__isSmartRef__":true,"id":180},"alphaMap":{"__isSmartRef__":true,"id":181},"envMap":{"__isSmartRef__":true,"id":182},"flipEnvMap":{"__isSmartRef__":true,"id":183},"reflectivity":{"__isSmartRef__":true,"id":184},"refractionRatio":{"__isSmartRef__":true,"id":185},"morphTargetInfluences":{"__isSmartRef__":true,"id":186},"fogDensity":{"__isSmartRef__":true,"id":187},"fogNear":{"__isSmartRef__":true,"id":188},"fogFar":{"__isSmartRef__":true,"id":189},"fogColor":{"__isSmartRef__":true,"id":190},"shadowMap":{"__isSmartRef__":true,"id":192},"shadowMapSize":{"__isSmartRef__":true,"id":193},"shadowBias":{"__isSmartRef__":true,"id":194},"shadowDarkness":{"__isSmartRef__":true,"id":195},"shadowMatrix":{"__isSmartRef__":true,"id":196}},"174":{"type":"c","value":{"__isSmartRef__":true,"id":170}},"175":{"type":"f","value":1},"176":{"type":"t","value":null},"177":{"type":"v4","value":{"__isSmartRef__":true,"id":178}},"178":{"x":0,"y":0,"z":1,"w":1},"179":{"type":"t","value":null},"180":{"type":"t","value":null},"181":{"type":"t","value":null},"182":{"type":"t","value":null},"183":{"type":"f","value":-1},"184":{"type":"f","value":1},"185":{"type":"f","value":0.98},"186":{"type":"f","value":0},"187":{"type":"f","value":0.00025},"188":{"type":"f","value":1},"189":{"type":"f","value":2000},"190":{"type":"c","value":{"__isSmartRef__":true,"id":191}},"191":{"r":1,"g":1,"b":1},"192":{"type":"tv","value":[]},"193":{"type":"v2v","value":[]},"194":{"type":"fv1","value":[]},"195":{"type":"fv1","value":[]},"196":{"type":"m4v","value":[]},"197":{"uniforms":{"__isSmartRef__":true,"id":198},"attributes":{"__isSmartRef__":true,"id":203},"attributesKeys":["position","normal","uv","uv2","tangent","color","skinIndex","skinWeight","lineDistance","morphTarget0","morphTarget1","morphTarget2","morphTarget3","morphTarget4","morphTarget5","morphTarget6","morphTarget7","morphNormal0","morphNormal1","morphNormal2","morphNormal3"],"id":3,"code":"basic,precision,highp,supportsVertexTextures,true,map,false,envMap,false,envMapMode,,lightMap,false,bumpMap,false,normalMap,false,specularMap,false,alphaMap,false,combine,0,vertexColors,0,fog,,useFog,true,fogExp,false,flatShading,false,sizeAttenuation,,logarithmicDepthBuffer,false,skinning,false,maxBones,251,useVertexTexture,,morphTargets,false,morphNormals,,maxMorphTargets,8,maxMorphNormals,4,maxDirLights,0,maxPointLights,0,maxSpotLights,0,maxHemiLights,0,maxShadows,0,shadowMapEnabled,false,shadowMapType,1,shadowMapDebug,false,shadowMapCascade,false,alphaTest,0,metal,,wrapAround,,doubleSided,false,flipSided,false","usedTimes":1,"program":{"__isSmartRef__":true,"id":204},"vertexShader":{"__isSmartRef__":true,"id":205},"fragmentShader":{"__isSmartRef__":true,"id":206}},"198":{"viewMatrix":null,"modelViewMatrix":{"__isSmartRef__":true,"id":199},"projectionMatrix":{"__isSmartRef__":true,"id":200},"normalMatrix":null,"modelMatrix":null,"cameraPosition":null,"morphTargetInfluences":null,"bindMatrix":null,"bindMatrixInverse":null,"boneGlobalMatrices":null,"diffuse":{"__isSmartRef__":true,"id":201},"opacity":{"__isSmartRef__":true,"id":202},"map":null,"offsetRepeat":null,"lightMap":null,"specularMap":null,"alphaMap":null,"envMap":null,"flipEnvMap":null,"reflectivity":null,"refractionRatio":null,"fogDensity":null,"fogNear":null,"fogFar":null,"fogColor":null,"shadowMap":null,"shadowMapSize":null,"shadowBias":null,"shadowDarkness":null,"shadowMatrix":null},"199":{},"200":{},"201":{},"202":{},"203":{"position":0,"normal":-1,"uv":-1,"uv2":-1,"tangent":-1,"color":-1,"skinIndex":-1,"skinWeight":-1,"lineDistance":-1,"morphTarget0":-1,"morphTarget1":-1,"morphTarget2":-1,"morphTarget3":-1,"morphTarget4":-1,"morphTarget5":-1,"morphTarget6":-1,"morphTarget7":-1,"morphNormal0":-1,"morphNormal1":-1,"morphNormal2":-1,"morphNormal3":-1},"204":{},"205":{},"206":{},"207":{"elements":{"__isSmartRef__":true,"id":208}},"208":{"__TypedArrayClass__":"Float32Array","__TypedArrayData__":[0.9946811199188232,0.01060947310179472,0.10245443880558014,0,-8.673617379884035e-19,0.9946811199188232,-0.10300230234861374,0,-0.10300230234861374,0.10245443880558014,0.9893905520439148,0,0,0,-1.399999976158142,1]},"209":{"elements":{"__isSmartRef__":true,"id":210}},"210":{"__TypedArrayClass__":"Float32Array","__TypedArrayData__":[0.9946811199188232,0.010609474033117294,0.10245444625616074,-4.1811337725405906e-10,0.9946811199188232,-0.10300229489803314,-0.10300229489803314,0.10245444625616074,0.9893905520439148]},"211":{"removed":[]},"212":{"setHTMLString":{"__isSmartRef__":true,"id":213},"displayHTML":{"__isSmartRef__":true,"id":216},"draw":{"__isSmartRef__":true,"id":219},"load3":{"__isSmartRef__":true,"id":222},"onLoad":{"__isSmartRef__":true,"id":225},"reset":{"__isSmartRef__":true,"id":228},"setColor":{"__isSmartRef__":true,"id":231}},"213":{"varMapping":{"__isSmartRef__":true,"id":214},"source":"function setHTMLString(htmlString) {\n    this.htmlString = htmlString;\n    this.displayHTML();\n}","funcProperties":{"__isSmartRef__":true,"id":215},"__LivelyClassName__":"lively.Closure"},"214":{"this":{"__isSmartRef__":true,"id":0}},"215":{"user":"Alexia","__serializedExpressions__":["timestamp"],"timestamp":"new Date(\"Fri Jun 05 2015 15:30:47 GMT-0700 (PDT)\")"},"216":{"varMapping":{"__isSmartRef__":true,"id":217},"source":"function displayHTML() {\n    this.setClipMode('auto');\n    this.jQuery().html(this.htmlString);\n}","funcProperties":{"__isSmartRef__":true,"id":218},"__LivelyClassName__":"lively.Closure"},"217":{"this":{"__isSmartRef__":true,"id":0}},"218":{"user":"Alexia","__serializedExpressions__":["timestamp"],"timestamp":"new Date(\"Mon Jun 08 2015 22:33:26 GMT-0700 (PDT)\")"},"219":{"varMapping":{"__isSmartRef__":true,"id":220},"source":"function draw() {\n    var self = this;\n    var scene = new Global.THREE.Scene();\n    var camera = new Global.THREE.PerspectiveCamera(75, this.getExtent().x / this.getExtent().y, 0.1, 1000);\n    var renderer = new Global.THREE.WebGLRenderer({ alpha: true });\n    renderer.setSize(this.getExtent().x, this.getExtent().y);\n    renderer.setClearColor(16777215, 0);\n    // Global.inspect(renderer.domElement);\n    // document.body.appendChild(renderer.domElement);\n    this.appendChild(renderer.domElement);\n    var geometry = new Global.THREE.BoxGeometry(1, 1, 1);\n    var material = new Global.THREE.MeshBasicMaterial({ color: 16711782 });\n    //==========ATTENTION!!!!=============\n    this.cube = new Global.THREE.Mesh(geometry, material);\n    scene.add(this.cube);\n    camera.position.z = 1.4;\n    var render = function render() {\n        requestAnimationFrame(render);\n        self.cube.rotation.x += 0.01;\n        self.cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n    };\n    render();\n}","funcProperties":{"__isSmartRef__":true,"id":221},"__LivelyClassName__":"lively.Closure"},"220":{"this":{"__isSmartRef__":true,"id":0}},"221":{"__serializedExpressions__":["timestamp"],"user":"Alexia","timestamp":"new Date(\"Tue Jun 09 2015 14:16:39 GMT-0700 (PDT)\")"},"222":{"varMapping":{"__isSmartRef__":true,"id":223},"source":"function load3(loadAttemptCount, thenDo) {\n    var self = this;\n    var maxLoadAttemptCount = 5;\n    var ThreeURL = '//cdnjs.cloudflare.com/ajax/libs/three.js/r71/three.js';\n    if (!loadAttemptCount) loadAttemptCount = 1;\n    Global.$('script[src=\"' + ThreeURL + '\"]').remove();\n    Global.JSLoader.loadJs(ThreeURL);\n    Functions.waitFor(5 * 1000, function () {\n        return typeof Global.THREE !== 'undefined';\n    }, function (err) {\n        var msg;\n        if (err && loadAttemptCount < maxLoadAttemptCount) {\n            msg = Strings.format('Loading THREE, attempt %s timed out.\\nTrying again...', loadAttemptCount);\n            $world.setStatusMessage(msg, Global.Color.yellow, 5);\n            self.load3(loadAttemptCount + 1);\n            return;\n        }\n        if (err) {\n            msg = Strings.format('Cannot load d3 library.\\nSorry, THREE isn\\'t available right now.', loadAttemptCount);\n            $world.setStatusMessage(msg, Global.Color.red, 10);\n            return;\n        }\n        msg = Strings.format('THREE loaded!', loadAttemptCount);\n        $world.setStatusMessage(msg, Global.Color.green, 4);\n        thenDo && thenDo();\n        lively.bindings.signal(this, '3Loaded');\n    });\n}","funcProperties":{"__isSmartRef__":true,"id":224},"__LivelyClassName__":"lively.Closure"},"223":{"this":{"__isSmartRef__":true,"id":0}},"224":{"user":"Alexia","__serializedExpressions__":["timestamp"],"timestamp":"new Date(\"Mon Jun 08 2015 22:33:26 GMT-0700 (PDT)\")"},"225":{"varMapping":{"__isSmartRef__":true,"id":226},"source":"function onLoad() {\n    this.reset();\n    this.load3();\n    this.draw();\n}","funcProperties":{"__isSmartRef__":true,"id":227},"__LivelyClassName__":"lively.Closure"},"226":{"this":{"__isSmartRef__":true,"id":0}},"227":{"user":"Alexia","__serializedExpressions__":["timestamp"],"timestamp":"new Date(\"Mon Jun 08 2015 22:15:07 GMT-0700 (PDT)\")"},"228":{"varMapping":{"__isSmartRef__":true,"id":229},"source":"function reset() {\n    this.setHTMLString('');\n    if (this.children().item() != null) this.children().item().remove();\n}","funcProperties":{"__isSmartRef__":true,"id":230},"__LivelyClassName__":"lively.Closure"},"229":{"this":{"__isSmartRef__":true,"id":0}},"230":{"user":"Alexia","__serializedExpressions__":["timestamp"],"timestamp":"new Date(\"Mon Jun 08 2015 22:30:26 GMT-0700 (PDT)\")"},"231":{"varMapping":{"__isSmartRef__":true,"id":232},"source":"function setColor(hex) {\n    this.cube.material.color.setHex(16737792);\n}","funcProperties":{"__isSmartRef__":true,"id":233},"__LivelyClassName__":"lively.Closure"},"232":{"this":{"__isSmartRef__":true,"id":0}},"233":{"__serializedExpressions__":["timestamp"],"user":"Alexia","timestamp":"new Date(\"Tue Jun 09 2015 14:02:06 GMT-0700 (PDT)\")"},"isSimplifiedRegistry":true}}